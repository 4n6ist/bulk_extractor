#else
#include "re2/re2.h"

/**
 * The regex_list maintains a list of literal strings and regular expressions.
 * The list can be read out of a file.
 * check() returns true if the provided string is inside the list
 */
class regex_list {
 public:
    typedef std::set<string>string_set;
    typedef std::vector<re2::RE2 *>re2_vector;
    
    string_set literal_strings;			/* static strings */
    re2_vector patterns;
    regex_list():literal_strings(),patterns(){}
    ~regex_list(){
	for(re2_vector::iterator it=patterns.begin(); it != patterns.end(); it++){
	    delete *it;
	}
    }
    size_t size(){
	return literal_strings.size() + patterns.size();
    }
    void add_regex(const std::string &pat){
	/* TK: Should add to literal_strings if there is no special chracter */
	patterns.push_back(new re2::RE2(pat,RE2::Latin1));
    }
    /**
     * Read a file; returns 0 if successful, -1 if failure.
     * @param fname - the file to read.
     */
    int readfile(std::string fname){
	std::ifstream f(fname.c_str());
	if(f.is_open()){
	    while(!f.eof()){
		std::string line;
		getline(f,line);
		if((*line.end())=='\r'){
		    line.erase(line.end());	/* remove the last character if it is a \r */
		}
		add_regex(line);
	    }
	    f.close();
	    return 0;
	}
	return -1;
    }
    /** check() must be threadsafe. */
    bool check(const std::string &probe,std::string *found, size_t *offset,size_t *len) const {
	/* First check literals, because they are faster */
	if(literal_strings.find(probe)!=literal_strings.end()){
	    return true;
	}
	/* Now check the patterns */
	for(re2_vector::const_iterator it=patterns.begin(); it != patterns.end(); it++){
	    std::string match;
	    if(re2::RE2::PartialMatch(probe,*(*it),&match)){
		/* RE2 doesn't seem to have the ability to tell me where the match is.
		 * However sometimes this information is needed. So if it is needed, figure it
		 * out.
		 */
		if(found) *found = match;
		if(offset || len){
		    size_t loc = probe.find(match);
		    if(offset) *offset = loc;
		    if(len)    *len    = match.size();
		}
		return true;
	    }
	}
	return false;
    }
};
#endif
#endif



