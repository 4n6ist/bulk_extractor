Bulk Extractor 1.4.1.   Feature Freeze: 1 DEC.  Beta: 1 JAN. Release: 1 FEB
===========================================================================

New in v1.4.1:

+ kill the threads when phase1 is over. (Save memory)
+ thread-safe map
+ evaluate use of unordered_map
+ evaluate how much RAM is used by histogram generation; can we move to one-pass histogram for other feature recorders?
+ libbulk_extractor callback API:

    typedef bulk_extractor_handle int;
    bulk_extractor_handle han;


behan =  bulk_extractor_open(be_callback cb);
- returns valid pointer if success, 0 if failure.
int bulk_extractor_analyze_dev(behan,char *dev);
int bulk_extractor_analyze_dir(behan,char *dir);
int bulk_extractor_analyze_buf(behan,uint8_t *buf,size_t buflen);
int bulk_extractor_close(behan);

  The only histograms you get are the one-pass histograms.


  pure C callback:

    int be_callback(int32_t flag,
                    uint32_t arg,
                    const char *feature_recorder_name,
                    const char *feature,size_t feature_len,
                    const char *context,size_t context_len);

    flag 0x0001 - feature 
         0x0002 - histogram (count in arg)
         0x0004 - carved object.   
               feature is no longer null-terminated
               context is the filename

    return 0 to continue, return -1 to abort further bulk_extractor processing.

Python Module Example:
  
import bulk_extractor

def be_callback(flag,count=None,feature_recorder_name=None,feature=None,context=None,filename=None):
    if flag & 0x0001:
        print("{}: Found feature '{}'".format(feature_recorder_name,feature))
    if flag & 0x0002:
        print("{}: {}  n={}".format(feature_recorder_name,feature,arg))
    if flag & 0x0004:
        print("CARVE filename {} (len={})".format(context,len(feature)))

be = bulk_extractor.bulk_extractor()
print("Running bulk_extractor on a single email address")
be.analyze_buf(be_callback,b"user@company.com")
print("Running bulk_extractor on current directory")
be.analyze_dir(be_callback,".")


